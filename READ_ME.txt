This program is free software; you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation; either version 3 of the License, orany later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.Email:  justin.thaler@yale.eduJuly 7, 2007================================================================DESCRIPTIONThis program was developed during the 2007 DIMACS REU by Justin Thaler under the guidance of Drs. Graham Cormode and Muthu Muthukrishnan. Itincludes implementation of three versions of the algorithm for streaming entropy computation presented in Section 4 of "A Near-Optimal Algorithm forComputing the Entropy of a Stream" by Amit Chakrabarti, Graham Cormode, and Andrew McGregor. The first is a "fast" implementation, the second is a "slow" implementation that adheres to the pseduocode in the version of 
the aforementioned paper from SODA 2007, and the third is a "naive" 
implementation that does not take backup-samples and hence is not 
guaranteed to be accurate on streams with low entropies.The three key functions for use of the fast interface are Estimator_Init(), Estimator_Update() and Estimator_end_stream() located in the file entropy.c.Estimator_Init() initializes and returns a pointer to the estimator, and Estimator_Update() processes a new token read from the stream. Estimator_End_Stream() should be called when the end of the stream is reached;it computes and returns the estimated entropy. Similarly, the key functions for use of the slow interface are Slow_Estimator_Init(), Slow_Estimator_Update() and Slow_Estimator_End_Stream() located in slowentropy.c The naive versions of these functions are in naive.c.INSTALLATIONDownload all files and type make. This will create two executables. The first, called "entropymain", has the capability to do both of the following:1) create a synthetic string satisfying specified properties, compute and output its exact entropy, and estimate its entropy using any of the three versions AND2) estimate the entropy of the tokens contained in a file using any of the three versions. The  second executable, called "automatedentropy", runs the estimation  algorithm on all possible  combinations of the parameters in the array "length" and in the array "zipf" in the file automatedentropy.c, outputting  results in
two files. This program uses the C99 standard version of C; it might require 
modification under other versions of C. DIRECTIONS AND SAMPLE CALLS FOR ENTROPYMAINThe "main" function for entropymain is located is in the file entropymain.c. There are 12 flags that can be used on the command line: -f, -n, -s, -z, -m, -e, -d, -c, -k, -l, -r, -b. To choose which version of the algorithm to use, use one of the -f (fast), -s (slow), -n (naive) flags. If none is chosen, the default is the fast version. If two or more are chosen an error message is printed.-z is used to create a synthetic distribution. It is followed by a required floating point argument: the zipfparameter. The zipfparameter must be nonnegative; a higher zipfparameter creates a more skewed distribution while a zipfparameter of 0 creates a uniform distribution. Note a zipfparameter of 1.0 will not work correctly because the function used to draw from the zipfian distribution is not correct at this value. Use the workaround of selecting a zifparameter very close to 1, like 1.001. If neither -m nor -z is used, the default is to create a synthetic distribution with zipfparameter 1.1.-m is used to read from a file. It must be followed by a filename argument. If both -m and -z are used, an error message is printed. If neither -m nor -z is used, the default is to create a synthetic distribution with zipfparameter 1.1.-e and -d are used to specify values for epsilon and delta. They both take a required floating point argument. If neither -e, or -d is used, epsilon and delta default to .1.-c is used to specify the number of samplers to be used by the algorithm while -k is used to specify the number of counters to be used the Misra-Gries part of the algorithm. One, both, or none of these flags may be provided. If only one is provided, the other will default to what it's value would have been given the length of the stream and the values of epsilon and delta. They both take a required integer argument. Note that if the -c and -k flags are used simultaneously with the -e and -d flags, the -e and -d flags will have no effect. If the naive version of the algorithm is used, the -k flag is ignored.-l is used to specify the length of a synthetic distribution. It takes a required integer argument, and the default length is 100,000 if the -l flag is not used. It is ignored if the -m flag is used.-r is used to specify the size of the alphabet. It takes a required integer argument, and the default size is 100,000 if none is specified (alphabet is [1, 100,000]). The -r flag is ignored if the -m option is used.-b is used to specify the number of bytes to read per token from a file. It takes a required integer parameter that must be in the range [1, 4] because we store the tokens in ints which are only guaranteed to be 4 bytes. The -b flagged is ignored if the -z flag is used.For all flags that take optional or required arguments, if the flag is provided more than once, the final instance of the flag will take precedence. For example, $ ./entropymain -z 9.0 -z 2.0 creates a stream with zipfparameter 2.0.Example 1 (error: both -m and -z used):$ ./entropymain -m entropy.c -z 1.0can't choose to read from file (-m) and create synthetic stream (-z) at same timeExample 2 (estimate entropy of synthetic stream with zipfparameter 9.0 and length 1,000,000, using fast version of algorithm, and with eps=.05, delta=.1 (by default), and c = 10000):$ ./entropymain -z 9.0 -f -l 1000000 -e .05 -c 10000exact entropy is 0.021911took 1236 ms and used 721104 bytesEstimated entropy is: 0.021860Example 3 (estimate entropy of the file entropy.c with 10,000 counters, k=70 (because k = 7/eps by default) using slow version of algorithm:$ ./entropymain -m entropy.c -c 10000 -stook 255 ms and used 3784 bytesEstimated entropy is: 4.693010DIRECTIONS FOR AUTOMATEDENTROPYWe provide an main() function for the target "automatedentropy" in the file automatedentropy.c. This main() function runs the estimation algorithm on all possible combinations  of the parameters in the array "length" and in the array "zipf", outputting results in two files: timevlength and timevzipf. These two files contain the same information, which can easily be copied and pasted into Microsoft Excel, but the results  are ordered differently so it's easier to isolate the desired independent variable in any  graphs a user creates.To use this program, open the file automatedentropy.c, make sure the array length[] contains the desired stream-length parameters and the array zipf[] contains the desired zipf parameters, and the MACROS L_MAX and Z_MAX are equalto the number of entries in length[] and zipf[] respectively. Then type make into the command line and run the automatedentropy executable.The program allows the user to select which version of the algorithm to use through the -f, -n, and -s flags just like entropymain. The default is the fast version. The user may also choose values for epsilon and delta by using the -e and -d flags just like in entropymain. If the -e, -d, or -r flags are provided more than once, the final instance of the flag will take precedence. For example, $ ./automatedentropy -e .85 -e .15 causes epsilon to be set to .15.